package com.dandan.crm.workbench.mapper;

import com.dandan.crm.workbench.domain.Activity;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Fri Nov 26 20:48:29 CST 2021
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Fri Nov 26 20:48:29 CST 2021
     */
    int insert(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Fri Nov 26 20:48:29 CST 2021
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Fri Nov 26 20:48:29 CST 2021
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Fri Nov 26 20:48:29 CST 2021
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Fri Nov 26 20:48:29 CST 2021
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 保存市场活动信息
     * @param activity
     * @return
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件分页查询市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String, Object> map);

    /**
     * 根据条件查询市场活动总条数
     * @param map
     * @return
     */
    int selectActivityCountByCondition(Map<String, Object> map);

    /**
     * 根据所选中活动信息的ID进行删除操作
     * @param ids
     * @return
     */
    int deleteActivityByIdForPage(String[] ids);

    /**
     * 根据id查询市场活动信息
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    /**
     * 根据id更新市场活动信息
     * @param activity
     * @return
     */
    int updateActivityById(Activity activity);

    /**
     * 查询所有的市场活动信息
     * @return
     */
    List<Activity> selectAllActivitys();

    /**
     * 根据所选中活动信息的ID进行查询操作
     * @param ids
     * @return
     */
    List<Activity> selectActivityByIds(String[] ids);

    /**
     * 批量添加市场活动信息
     * @param list
     * @return
     */
    int insertActivityByList(@Param("list") List<Activity> list);

    /**
     * 根据id查询市场活动明细信息
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据线索id查询对应线索下所有的市场活动信息
     * @param clueId
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    /**
     * 根据市场活动名称和线索id查询相关联的市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForDetailByActivityNameClueId(Map<String, Object> map);

    /**
     * 批量查询市场活动信息
     * @param ids
     * @return
     */
    List<Activity> selectActivityForDetailByIds(String[] ids);
}