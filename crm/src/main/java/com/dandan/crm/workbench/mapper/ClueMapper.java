package com.dandan.crm.workbench.mapper;

import com.dandan.crm.workbench.domain.Clue;
import com.dandan.crm.workbench.domain.ClueRemark;

import java.util.List;
import java.util.Map;

public interface ClueMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue
     *
     * @mbggenerated Fri Dec 03 14:30:59 CST 2021
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue
     *
     * @mbggenerated Fri Dec 03 14:30:59 CST 2021
     */
    int insert(Clue record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue
     *
     * @mbggenerated Fri Dec 03 14:30:59 CST 2021
     */
    int insertSelective(Clue record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue
     *
     * @mbggenerated Fri Dec 03 14:30:59 CST 2021
     */
    Clue selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue
     *
     * @mbggenerated Fri Dec 03 14:30:59 CST 2021
     */
    int updateByPrimaryKeySelective(Clue record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue
     *
     * @mbggenerated Fri Dec 03 14:30:59 CST 2021
     */
    int updateByPrimaryKey(Clue record);

    /**
     * 保存创建的线索
     * @param clue
     * @return
     */
    int insertCreateClue(Clue clue);

    /**
     * 根据条件查询对应的线索信息
     * @param map
     * @return
     */
    List<Clue> selectClueByConditionForPage(Map<String, Object> map);

    /**
     * 根据条件查询对应的线索信息的总条数
     * @param map
     * @return
     */
    int selectClueCountByConditionForPage(Map<String, Object> map);

    /**
     * 根据选中的信息id删除记录
     * @param id
     * @return
     */
    int deleteClueById(String[] id);

    /**
     * 根据id查询对应线索信息
     * @param id
     * @return
     */
    Clue selectClueById(String id);

    /**
     * 根据保存的信息更新线索
     * @param clue
     * @return
     */
    int updateClueByMessageForPage(Clue clue);

    /**
     * 根据id查询对应默认线索信息
     * @param id
     * @return
     */
    Clue selectDefaultClueById(String id);

    int deleteClue(String clueId);
}